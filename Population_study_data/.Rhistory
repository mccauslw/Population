plot(x,y,type='l')
lines(x,-log(2)+x,col='red')
lines(x,x^2,col='blue')
lines(x,0.5*x^2,col='blue')
plot(x,-log(2)+x,type='l')
lines(x,y)
lines(x,0.5*x^2)
source('~/.active-rstudio-document', echo=TRUE)
x = seq(1, 50, by=1)
y1 = sum(rnorm(50))
y2 = sum(rnorm(50))
plot(x, y1, type='l')
lines(x, y2)
x
y1
triple.list = list(c(1, 2, 3), c(1, 2, 4), c(1, 2, 5), c(1, 3, 4), c(1, 3, 5),
c(1, 4, 5), c(2, 3, 4), c(2, 3, 5), c(2, 4, 5), c(3, 4, 5))
triple.list[[2]]
triple.list[[2]][1]
triple.list[[2]][[1]]
triple.list[2,1]
triple.list[2][1]
triple.list[[2]]
library(bitops)
source('~/Dropbox/_RCM/R Simplices/simplex.R')
setwd("~/Dropbox/_RCM/Experiment")
setwd("~/Dropbox/_RCM/Experiment_population_study")
t = read.csv("Experimental_Data_Prelim_n98.csv")
n.lines = dim(t)[1]
domain.names = c(
'Male stars',
'Female stars',
'Films',
'Star pairs',
'Pizzas',
'Juices',
'Colours',
'Colour Combinations',
'Events',
'Radio formats',
'Musical artists',
'Aboriginal art',
'Impressionist art',
'Sentences',
'Travel',
'Marijuana',
'Latitude',
'Dots',
'Triangles',
'Population',
'Surface area',
'Beer',
'Cars',
'Restaurants',
'Flight layovers',
'Future payments',
'Phone plans',
'Hotel rooms',
'Two-flight itineraries',
'Televisions',
'Coffee',
'Charity')
n.domains = length(domain.names)
n.objects = 5
n.subsets = 2^n.objects
all.choice = array(0, c(n.domains, n.subsets, n.objects))
for (line in 1:n.lines) {
# The choice set is built up iteratively, starting at the empty set.
set = 0;
domain = t[line, 'domain']
choice.pos = t[line, 'choice']
for (pos in 1:5) {
col.name = sprintf("obj%i", pos)
col.value = t[line, col.name]
## If value in spreadsheet column pos isn't missing, it is the index of a choice object in the current choice set. In this case, add object to choice set.
if (!is.na(col.value)) {
set = set + bitShiftL(1, col.value-1)
}
## If object in position pos has the same position as the chosen object, record object as the chosen object.
if (pos==choice.pos) {
choice = col.value
}
}
## Add one to the appropriate choice count given the information for this trial
all.choice[domain, set+1, choice] = all.choice[domain, set+1, choice]+1
}
all.choice[1,]
all.choice[1,,]
triple.list = list(c(1, 2, 3), c(1, 2, 4), c(1, 2, 5), c(1, 3, 4), c(1, 3, 5),
c(1, 4, 5), c(2, 3, 4), c(2, 3, 5), c(2, 4, 5), c(3, 4, 5))
op = par(mfrows=c(2, 5), mar = c(4, 4, 0.5, 0.5))
op = par(mfrow=c(2, 5), mar = c(4, 4, 0.5, 0.5))
for (domain in 1:n.domains) {
# Set up array of simplex diagrams for this domain
filename = sprintf("Figures/%s.pdf", domain.names[domain])
pdf(filename, paper='special', width=9, height=4)
for (triple in 1:10) {
x = triple.list[[triple]][1]; xsing = bitShiftL(1, x-1)
y = triple.list[[triple]][2]; ysing = bitShiftL(1, y-1)
z = triple.list[[triple]][3]; zsing = bitShiftL(1, z-1)
T = xsing + yxing + zsing
xy = xsing + ysing; yz = ysing + zsing; xz = xsing + zsing
pxy = all.choice[domain, xy, x] / (all.choice[domain, xy, x] + all.choice[domain, xy, y])
pyz = all.choice[domain, yz, y] / (all.choice[domain, yz, y] + all.choice[domain, yz, z])
pxz = all.choice[domain, xz, x] / (all.choice[domain, xz, x] + all.choice[domain, xz, z])
nT = all.choice[domain, T, x] + all.choice[domain, T, y] + all.choice[domain, T, z]
PTx = all.choice[domain, T, x] / nT
PTy = all.choice[domain, T, y] / nT
plot.axioms(pxy, pyz, pxz, PTx, PTy, label=, binary.pch=1, ternary.pch=20)
}
dev.off()
}
par(op)
source('~/Dropbox/_RCM/Experiment_population_study/experiment_data_read.R')
source('~/Dropbox/_RCM/Experiment_population_study/experiment_data_read.R')
source('~/Dropbox/_RCM/Experiment_population_study/experiment_data_read.R')
source('~/Dropbox/_RCM/Experiment_population_study/experiment_data_read.R')
source('~/Dropbox/_RCM/Experiment_population_study/experiment_data_read.R')
source('~/Dropbox/_RCM/Experiment_population_study/experiment_data_read.R')
for (domain in 1:n.domains) {
# Set up array of simplex diagrams for this domain
filename = sprintf("Triangle figures/%s.pdf", domain.names[domain])
pdf(filename, paper='special', width=9, height=4)
for (triple in 1:10) {
x = triple.list[[triple]][1]; xsing = bitShiftL(1, x-1)
y = triple.list[[triple]][2]; ysing = bitShiftL(1, y-1)
z = triple.list[[triple]][3]; zsing = bitShiftL(1, z-1)
T = xsing + ysing + zsing
xy = xsing + ysing; yz = ysing + zsing; xz = xsing + zsing
pxy = all.choice[domain, xy, x] / (all.choice[domain, xy, x] + all.choice[domain, xy, y])
pyz = all.choice[domain, yz, y] / (all.choice[domain, yz, y] + all.choice[domain, yz, z])
pxz = all.choice[domain, xz, x] / (all.choice[domain, xz, x] + all.choice[domain, xz, z])
nT = all.choice[domain, T, x] + all.choice[domain, T, y] + all.choice[domain, T, z]
PTx = all.choice[domain, T, x] / nT
PTy = all.choice[domain, T, y] / nT
plot.axioms(pxy, pyz, pxz, PTx, PTy, label=triple.list[[triple]], binary.pch=1, ternary.pch=20)
}
dev.off()
}
all.choice[[1]]
all.choice[1,,
]
source('~/Dropbox/_RCM/Experiment_population_study/experiment_data_read.R')
source('~/Dropbox/_RCM/Experiment_population_study/experiment_data_read.R')
source('~/Dropbox/_RCM/Experiment_population_study/experiment_data_read.R')
source('~/Dropbox/_RCM/Experiment_population_study/experiment_data_read.R')
source('~/Dropbox/_RCM/Experiment_population_study/experiment_data_read.R')
source('~/Dropbox/_RCM/Experiment_population_study/experiment_data_read.R')
source('~/Dropbox/_RCM/Experiment_population_study/experiment_data_read.R')
source('~/Dropbox/_RCM/Experiment_population_study/experiment_data_read.R')
source('~/Dropbox/_RCM/Experiment_population_study/experiment_data_read.R')
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
source('~/Dropbox/_RCM/Experiment_population_study/experiment_data_read.R')
count.totals = rowSums(all.choice, dims=3)
count.totals = colSums(all.choice, dims=3)
count.totals = rowSums(all.choice, dims=2)
View(count.totals)
count.totals
mystring = list('a', 'b', 'c')
mystring
paste(mystring, sep='7')
vec = paste(mystring)
vec
mystring
paste(vec, sep='7')
mystring = c('a', 'b', 'c')
paste(mystring, sep='-')
paste('a', 'b', 'c', sep='-')
paste(mystring, collapse ='-')
mystring = list('a', 'b', 'c')
paste(mystring, collapse ='-')
source('~/Dropbox/_RCM/Experiment_population_study/experiment_data_read.R')
domain.names
gsub(' ', domain.names, fixed=TRUE, replacement='_')
source('~/Dropbox/_RCM/Experiment_population_study/experiment_data_read.R')
source('~/Dropbox/_RCM/Experiment_population_study/experiment_data_read.R')
all.choice
all.choice(2,,)
all.choice[2,,]
all.choice[2,3,]
paste(all.choice[2,3,], collapse=',')
paste(all.choice[2,3,], collapse=', ')
paste('{all.choice[2,3,], collapse=', ')
}
}}}
''
''
paste('{', all.choice[2,3,], collapse=', ')
c.string.list = vector('list', n.domains)
for (domain in 1:n.domains) {
domain.string.list = vector('list', n.subsets)
cnt.string = sprintf('    {0, 0, 0, 0, 0}')
domain.string.list[[1]] = cnt.string
for (set in 1:n.subsets-1) {
cnt.string = paste(all.choice[domain, set,], collapse = ', ')
sprintf('    {%s}', cnt.string) # e.g. '    {0, 20, 5, 5, 10}'
domain.string.list[[set+1]] = cnt.string
}
c.string.list[[domain]] = paste(domain.string.list, collapse = ',\n')
}
c.string = paste(c.string.list, collapse = ' },\n')
c.string
c.string.list = vector('list', n.domains)
for (domain in 1:n.domains) {
domain.string.list = vector('list', n.subsets)
cnt.string = sprintf('    {0, 0, 0, 0, 0}')
domain.string.list[[1]] = cnt.string
for (set in 1:n.subsets-1) {
cnt.string = paste(all.choice[domain, set,], collapse = ', ')
sprintf('    {%s}', cnt.string) # e.g. '    {0, 20, 5, 5, 10}'
domain.string.list[[set+1]] = cnt.string
}
c.string.list[[domain]] = paste(domain.string.list, collapse = ',\\n')
}
c.string = paste(c.string.list, collapse = ' },\\n')
c.string
c.string.list = vector('list', n.domains)
for (domain in 1:n.domains) {
domain.string.list = vector('list', n.subsets)
cnt.string = sprintf('    {0, 0, 0, 0, 0}')
domain.string.list[[1]] = cnt.string
for (set in 1:n.subsets-1) {
cnt.string = paste(all.choice[domain, set,], collapse = ', ')
sprintf('    {%s}', cnt.string) # e.g. '    {0, 20, 5, 5, 10}'
domain.string.list[[set+1]] = cnt.string
}
c.string.list[[domain]] = paste(domain.string.list, collapse = ',\n')
}
c.string
c.string.list = vector('list', n.domains)
for (domain in 1:n.domains) {
domain.string.list = vector('list', n.subsets)
cnt.string = sprintf('    {0, 0, 0, 0, 0}')
domain.string.list[[1]] = cnt.string
for (set in 1:n.subsets-1) {
cnt.string = paste(all.choice[domain, set,], collapse = ', ')
domain.string.list[[set+1]] = sprintf('    {%s}', cnt.string)
}
c.string.list[[domain]] = paste(domain.string.list, collapse = ',\n')
}
c.string = paste(c.string.list, collapse = ' },\n')
c.string
header = c('#include "RCM.h"', '#include "RCM_population.h"')
c.string.list = vector('list', n.domains)
for (domain in 1:n.domains) {
domain.string.list = vector('list', n.subsets)
cnt.string = sprintf('    {0, 0, 0, 0, 0}')
domain.string.list[[1]] = cnt.string
for (set in 1:n.subsets-1) {
cnt.string = paste(all.choice[domain, set,], collapse = ', ')
domain.string.list[[set+1]] = sprintf('    {%s}', cnt.string)
}
c.string.list[[domain]] = paste(domain.string.list, collapse = ',\n')
}
c.string = paste(c.string.list, collapse = ' },\n')
printf("%s", c.string, file="RCM_population.c")
header = c('#include "RCM.h"', '#include "RCM_population.h"')
c.string.list = vector('list', n.domains)
for (domain in 1:n.domains) {
domain.string.list = vector('list', n.subsets)
cnt.string = sprintf('    {0, 0, 0, 0, 0}')
domain.string.list[[1]] = cnt.string
for (set in 1:n.subsets-1) {
cnt.string = paste(all.choice[domain, set,], collapse = ', ')
domain.string.list[[set+1]] = sprintf('    {%s}', cnt.string)
}
c.string.list[[domain]] = paste(domain.string.list, collapse = ',\n')
}
c.string = paste(c.string.list, collapse = ' },\n')
cat(c.string, file="RCM_population.c")
header = c('#include "RCM.h"', '#include "RCM_population.h"')
c.string.list = vector('list', n.domains)
for (domain in 1:n.domains) {
domain.string.list = vector('list', n.subsets)
cnt.string = sprintf('%s', '    {0, 0, 0, 0, 0}')
domain.string.list[[1]] = cnt.string
for (set in 1:n.subsets-1) {
cnt.string = paste(all.choice[domain, set,], collapse = ', ')
domain.string.list[[set+1]] = sprintf('    {%s}', cnt.string)
}
c.string.list[[domain]] = paste(domain.string.list, collapse = ',\n')
}
c.string = paste(c.string.list, collapse = ' },\n')
cat(c.string, file="RCM_population.c")
c.string.list = vector('list', n.domains)
for (domain in 1:n.domains) {
domain.string.list = vector('list', n.subsets)
domain.string.list[[1]] = '    {0, 0, 0, 0, 0}'
for (set in 1:n.subsets-1) {
cnt.string = paste(all.choice[domain, set,], collapse = ', ')
domain.string.list[[set+1]] = sprintf('    {%s}', cnt.string)
}
c.string.list[[domain]] = paste(domain.string.list, collapse = ',\n')
}
c.string = paste(c.string.list, collapse = ' },\n')
cat(c.string, file="RCM_population.c")
domain.string.list
c.string.list = vector('list', n.domains)
for (domain in 1:n.domains) {
domain.string.list = vector('list', n.subsets)
domain.string.list[[1]] = '    {0, 0, 0, 0, 0}'
for (set in 1:n.subsets-1) {
cnt.string = paste(all.choice[domain, set,], collapse = ', ')
domain.string.list[[set+1]] = sprintf('    {%s}', cnt.string)
}
c.string.list[[domain]] = paste(domain.string.list, collapse = ',\n')
}
c.string = paste(c.string.list, collapse = ' },\n')
cat(c.string, file="RCM_population.c")
domain.string.list
c.string.list = vector('list', n.domains)
for (domain in 1:n.domains) {
domain.string.list = vector('list', n.subsets)
mystring = '    {0, 0, 0, 0, 0}'
domain.string.list[[1]] = '    {0, 0, 0, 0, 0}'
for (set in 1:n.subsets-1) {
cnt.string = paste(all.choice[domain, set,], collapse = ', ')
domain.string.list[[set+1]] = sprintf('    {%s}', cnt.string)
}
c.string.list[[domain]] = paste(domain.string.list, collapse = ',\n')
}
c.string = paste(c.string.list, collapse = ' },\n')
cat(c.string, file="RCM_population.c")
domain.string.list
mystring
header = c("'#include "RCM.h'", "'#include "RCM_population.h'")
c.string.list = vector('list', n.domains)
for (domain in 1:n.domains) {
domain.string.list = vector('list', n.subsets)
mystring = "    {0, 0, 0, 0, 0}"
domain.string.list[[1]] = "    {0, 0, 0, 0, 0}"
for (set in 1:n.subsets-1) {
cnt.string = paste(all.choice[domain, set,], collapse = ", ")
domain.string.list[[set+1]] = sprintf('    {%s}', cnt.string)
}
c.string.list[[domain]] = paste(domain.string.list, collapse = ",\n")
}
c.string = paste(c.string.list, collapse = " },\n")
cat(c.string, file="RCM_population.c")
mystring
domain.string.list
1:n.subsets-1
1:(n.subsets-1)
header = c("'#include "RCM.h'", "'#include "RCM_population.h'")
c.string.list = vector('list', n.domains)
for (domain in 1:n.domains) {
domain.string.list = vector('list', n.subsets)
domain.string.list[[1]] = "    {0, 0, 0, 0, 0}"
for (set in 1:(n.subsets-1)) {
cnt.string = paste(all.choice[domain, set,], collapse = ", ")
domain.string.list[[set+1]] = sprintf('    {%s}', cnt.string)
}
c.string.list[[domain]] = paste(domain.string.list, collapse = ",\n")
}
c.string = paste(c.string.list, collapse = " },\n")
cat(c.string, file="RCM_population.c")
header = c("'#include "RCM.h'", "'#include "RCM_population.h'")
c.string.list = vector('list', n.domains)
for (domain in 1:n.domains) {
domain.string.list = vector('list', n.subsets)
domain.string.list[[1]] = "    {0, 0, 0, 0, 0}"
for (set in 1:(n.subsets-1)) {
cnt.string = paste(all.choice[domain, set,], collapse = ", ")
domain.string.list[[set+1]] = sprintf('    {%s}', cnt.string)
}
domain.string = paste(domain.string.list, collapse = ",\n")
c.string.list[[domain]] = sprintf("{ /* %s */\n%s}", domain.names[domain], domain.string)
}
c.string = paste(c.string.list, collapse = " },\n")
cat(c.string, file="RCM_population.c")
header = c("'#include "RCM.h'", "'#include "RCM_population.h'")
c.string.list = vector('list', n.domains)
for (domain in 1:n.domains) {
domain.string.list = vector('list', n.subsets)
domain.string.list[[1]] = "    {0, 0, 0, 0, 0}"
for (set in 1:(n.subsets-1)) {
cnt.string = paste(all.choice[domain, set,], collapse = ", ")
domain.string.list[[set+1]] = sprintf('    {%s}', cnt.string)
}
domain.string = paste(domain.string.list, collapse = ",\n")
c.string.list[[domain]] = sprintf("{ /* %s */\n%s}", domain.names[domain], domain.string)
}
c.string = paste(c.string.list, collapse = ",\n")
cat(c.string, file="RCM_population.c")
c.string.list = vector('list', n.domains)
for (domain in 1:n.domains) {
domain.string.list = vector('list', n.subsets)
domain.string.list[[1]] = "    {0, 0, 0, 0, 0}"
for (set in 1:(n.subsets-1)) {
cnt.string = paste(all.choice[domain, set,], collapse = ", ")
domain.string.list[[set+1]] = sprintf('    {%s}', cnt.string)
}
domain.string = paste(domain.string.list, collapse = ",\n")
c.string.list[[domain]] = sprintf("{ /* %s */\n%s}", domain.names[domain], domain.string)
}
c.string = paste(c.string.list, collapse = ",\n")
cat(c.string, file="RCM_population.c")
header = c("'#include "RCM.h'", "'#include "RCM_population.h'")
c.string.list = vector('list', n.domains)
for (domain in 1:n.domains) {
domain.string.list = vector('list', n.subsets)
domain.string.list[[1]] = "    {0, 0, 0, 0, 0}"
for (set in 1:(n.subsets-1)) {
cnt.string = paste(all.choice[domain, set,], collapse = ", ")
domain.string.list[[set+1]] = sprintf('    {%s}', cnt.string)
}
domain.string = paste(domain.string.list, collapse = ",\n")
c.string.list[[domain]] = sprintf("{ /* %s */\n%s }", domain.names[domain], domain.string)
}
c.string = paste(c.string.list, collapse = ",\n")
cat(c.string, file="RCM_population.c")
header = c("'#include "RCM.h'", "'#include "RCM_population.h'")
c.string.list = vector('list', n.domains)
for (domain in 1:n.domains) {
domain.string.list = vector('list', n.subsets)
domain.string.list[[1]] = "    {0, 0, 0, 0, 0}"
for (set in 1:(n.subsets-1)) {
cnt.string = paste(all.choice[domain, set,], collapse = ", ")
domain.string.list[[set+1]] = sprintf('    {%s}', cnt.string)
}
domain.string = paste(domain.string.list, collapse = ",\n")
c.string.list[[domain]] = sprintf("{ /* %s */\n%s }", domain.names[domain], domain.string)
}
c.string = paste(c.string.list, collapse = ",\n  ")
cat(c.string, file="RCM_population.c")
c.string.list = vector('list', n.domains)
for (domain in 1:n.domains) {
domain.string.list = vector('list', n.subsets)
domain.string.list[[1]] = "    {0, 0, 0, 0, 0}"
for (set in 1:(n.subsets-1)) {
cnt.string = paste(all.choice[domain, set,], collapse = ", ")
domain.string.list[[set+1]] = sprintf('    {%s}', cnt.string)
}
domain.string = paste(domain.string.list, collapse = ",\n")
c.string.list[[domain]] = sprintf("{ /* %s */\n%s }", domain.names[domain], domain.string)
}
c.string = paste(c.string.list, collapse = ",\n  ")
sprintf("%s\n%s\n\nstatic int population_counts[%i][%i][%i] = { %s };",
'#include "RCM.h"',
'#include "RCM_population.h"', n.domains, n.subsets, n.objects, c.string)
cat(c.string, file="RCM_population.c")
source('~/Dropbox/_RCM/Experiment_population_study/experiment_data_read.R')
source('~/Dropbox/_RCM/Experiment_population_study/experiment_data_read.R')
source('~/Dropbox/_RCM/Experiment_population_study/experiment_data_read.R')
source('~/Dropbox/_RCM/Experiment_population_study/experiment_data_read.R')
source('~/Dropbox/_RCM/Experiment_population_study/experiment_data_read.R')
source('~/Dropbox/_RCM/Experiment_population_study/experiment_data_read.R')
source('~/Dropbox/_RCM/Experiment_population_study/experiment_data_read.R')
source('~/Dropbox/_RCM/Experiment_population_study/experiment_data_read.R')
source('~/Dropbox/_RCM/Experiment_population_study/experiment_data_read.R')
source('~/Dropbox/_RCM/Experiment_population_study/experiment_data_read.R')
